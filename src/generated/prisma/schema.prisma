// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profiles
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("supporter") // "creator" or "supporter"
  bio           String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[] // Posts created by this user (if creator)
  memberships   Membership[] // Memberships this user has created (if creator)
  subscriptions Subscription[] // Subscriptions this user has (if supporter)
  comments      Comment[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Content models
model Post {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  excerpt       String?   @db.Text
  creatorId     String
  tierAccess    Int       @default(0) // 0 = public, 1+ = specific tier level
  publishStatus String    @default("draft") // draft, published
  publishDate   DateTime?
  featuredImage String?
  views         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  creator  User      @relation(fields: [creatorId], references: [id])
  comments Comment[]

  @@index([creatorId])
  @@index([publishStatus])
  @@index([tierAccess])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

// Membership models
model MembershipTier {
  id          String   @id @default(cuid())
  creatorId   String
  name        String
  description String?  @db.Text
  price       Float
  benefits    String[] @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions Subscription[]
  membership    Membership?    @relation(fields: [membershipId], references: [id])
  membershipId  String?

  @@index([creatorId])
  @@index([membershipId])
}

model Membership {
  id          String   @id @default(cuid())
  creatorId   String
  title       String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator       User             @relation(fields: [creatorId], references: [id])
  tiers         MembershipTier[]
  subscriptions Subscription[]

  @@index([creatorId])
}

model Subscription {
  id           String    @id @default(cuid())
  supporterId  String
  membershipId String
  tierId       String
  startDate    DateTime  @default(now())
  endDate      DateTime?
  status       String    @default("active") // active, cancelled, expired
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  supporter  User           @relation(fields: [supporterId], references: [id])
  membership Membership     @relation(fields: [membershipId], references: [id])
  tier       MembershipTier @relation(fields: [tierId], references: [id])

  @@index([supporterId])
  @@index([membershipId])
  @@index([tierId])
  @@index([status])
}

// Payment models
model Payment {
  id              String   @id @default(cuid())
  amount          Float
  currency        String   @default("USD")
  supporterId     String
  creatorId       String
  subscriptionId  String?
  status          String // succeeded, pending, failed
  paymentMethod   String?
  paymentIntentId String?
  createdAt       DateTime @default(now())

  @@index([supporterId])
  @@index([creatorId])
  @@index([status])
}
